#!/usr/bin/env bash

iptellPath="/root/.iptell/"
pubdir="/var/www/html/files/priv/files/ips.html"

## Don't Touch These Vars
ipdir="$iptellPath/data/"
dataFile="$iptellPath/outfile"

#################### BEGIN HTML, HEAD
echo "<!DOCTYPE html><html><head>" > $dataFile
echo "<link rel='stylesheet' href='/css/style.css'><link rel='stylesheet' href='/css/dark.css'>" >> $dataFile # css
echo "<script src='/js/moment.min.js'></script><script src='/js/Chart.min.js'></script>" >> $dataFile # js
echo "</head><body>" >> $dataFile
#################### END HEAD, BEGIN BODY

#################### BEGIN NAVIGATION GENERATOR
echo "<div class="iptellnav">" >> $dataFile
for entry in "$ipdir"/*
do
    name=`echo $entry | sed 's@.*/@@'`
    if test `find $entry -mmin +30`; then olc=""; else olc="class='online'"; fi # online check navbar
    echo "<a $olc href='#$name'>$name</a>" >> $dataFile
done
echo "</div>" >> $dataFile
#################### END NAVIGATION GENERATOR

#################### BEGIN DATA PRINTING LOOP

echo "<h1>Local and Global IP Audit, as of $(date)</h1>" >> $dataFile

for entry in "$ipdir"/*
do
    name=`echo $entry | sed 's@.*/@@'` # the name of the client from the filename

    echo "<br/><br/><a name='$name'></a>" >> $dataFile # html anchor for navbar

    fileage=$((($(date +%s) - $(date +%s -r "$entry")) / 3600)) # in hours
    fileageMins=$((($(date +%s) - $(date +%s -r "$entry")) / 60)) # in hours
    fileageMins=$(( $fileageMins % 60 ))
    if test `find $entry -mmin +30` # online/offline check for H1 title
    then
        if [ $fileage -eq "1" ]; then s=""; else s="s"; fi # hours plural
        if [ $fileageMins -eq "1" ]; then sm=""; else sm="s"; fi # minutes plural
        echo "<h2 style='color:red;'>$name  (OFFLINE for $fileage hour$s, $fileageMins minute$sm)</h2>" >> $dataFile
    else
        echo "<h2>$name  (ONLINE)</h2>" >> $dataFile
    fi

    list="$(cat "$entry")"
    if ! [[ $list == *"ISHTML"* ]]
    then
        # echos all the IPs as a list
        echo "<ul type='circle'>" >> $dataFile
        while read -r line; do
            echo "<li> $line </li>" >> $dataFile
        done <<< "$list"
        echo "</ul>" >> $dataFile
    else
        echo "$list" >> $dataFile
    fi

done

#################### END DATA PRINTING LOOP

echo "<br/><br/><br/><br/></body></html>" >> $dataFile
mv $dataFile $pubdir
